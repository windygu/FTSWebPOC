//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.18444.
// 
#pragma warning disable 1591

namespace FTS.BaseUI.OOService {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="ServiceSoap", Namespace="http://tempuri.org/")]
    public partial class Service : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private CredentialSoapHeader credentialSoapHeaderValueField;
        
        private System.Threading.SendOrPostCallback PingOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsExistsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetServerTimeOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpLoadDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback CommitOperationCompleted;
        
        private System.Threading.SendOrPostCallback DownLoadDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback LogExceptionsOperationCompleted;
        
        private System.Threading.SendOrPostCallback DoLoadDataTableOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCacheVersionOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetNameCacheVersionOperationCompleted;
        
        private System.Threading.SendOrPostCallback ExecuteNonQueryOperationCompleted;
        
        private System.Threading.SendOrPostCallback ReRegisterOperationCompleted;
        
        private System.Threading.SendOrPostCallback RegisterOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public Service() {
            this.Url = global::FTS.BaseUI.Properties.Settings.Default.FTS_Base_OOService1_Service;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public CredentialSoapHeader CredentialSoapHeaderValue {
            get {
                return this.credentialSoapHeaderValueField;
            }
            set {
                this.credentialSoapHeaderValueField = value;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event PingCompletedEventHandler PingCompleted;
        
        /// <remarks/>
        public event IsExistsCompletedEventHandler IsExistsCompleted;
        
        /// <remarks/>
        public event GetServerTimeCompletedEventHandler GetServerTimeCompleted;
        
        /// <remarks/>
        public event UpLoadDataCompletedEventHandler UpLoadDataCompleted;
        
        /// <remarks/>
        public event CommitCompletedEventHandler CommitCompleted;
        
        /// <remarks/>
        public event DownLoadDataCompletedEventHandler DownLoadDataCompleted;
        
        /// <remarks/>
        public event LogExceptionsCompletedEventHandler LogExceptionsCompleted;
        
        /// <remarks/>
        public event DoLoadDataTableCompletedEventHandler DoLoadDataTableCompleted;
        
        /// <remarks/>
        public event GetCacheVersionCompletedEventHandler GetCacheVersionCompleted;
        
        /// <remarks/>
        public event GetNameCacheVersionCompletedEventHandler GetNameCacheVersionCompleted;
        
        /// <remarks/>
        public event ExecuteNonQueryCompletedEventHandler ExecuteNonQueryCompleted;
        
        /// <remarks/>
        public event ReRegisterCompletedEventHandler ReRegisterCompleted;
        
        /// <remarks/>
        public event RegisterCompletedEventHandler RegisterCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("CredentialSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Ping", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool Ping() {
            object[] results = this.Invoke("Ping", new object[0]);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginPing(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Ping", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndPing(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void PingAsync() {
            this.PingAsync(null);
        }
        
        /// <remarks/>
        public void PingAsync(object userState) {
            if ((this.PingOperationCompleted == null)) {
                this.PingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPingOperationCompleted);
            }
            this.InvokeAsync("Ping", new object[0], this.PingOperationCompleted, userState);
        }
        
        private void OnPingOperationCompleted(object arg) {
            if ((this.PingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PingCompleted(this, new PingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IsExists", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool IsExists(int workstationid, string hardwareinfo) {
            object[] results = this.Invoke("IsExists", new object[] {
                        workstationid,
                        hardwareinfo});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginIsExists(int workstationid, string hardwareinfo, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("IsExists", new object[] {
                        workstationid,
                        hardwareinfo}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndIsExists(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void IsExistsAsync(int workstationid, string hardwareinfo) {
            this.IsExistsAsync(workstationid, hardwareinfo, null);
        }
        
        /// <remarks/>
        public void IsExistsAsync(int workstationid, string hardwareinfo, object userState) {
            if ((this.IsExistsOperationCompleted == null)) {
                this.IsExistsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsExistsOperationCompleted);
            }
            this.InvokeAsync("IsExists", new object[] {
                        workstationid,
                        hardwareinfo}, this.IsExistsOperationCompleted, userState);
        }
        
        private void OnIsExistsOperationCompleted(object arg) {
            if ((this.IsExistsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsExistsCompleted(this, new IsExistsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetServerTime", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.DateTime GetServerTime() {
            object[] results = this.Invoke("GetServerTime", new object[0]);
            return ((System.DateTime)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetServerTime(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetServerTime", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public System.DateTime EndGetServerTime(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.DateTime)(results[0]));
        }
        
        /// <remarks/>
        public void GetServerTimeAsync() {
            this.GetServerTimeAsync(null);
        }
        
        /// <remarks/>
        public void GetServerTimeAsync(object userState) {
            if ((this.GetServerTimeOperationCompleted == null)) {
                this.GetServerTimeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetServerTimeOperationCompleted);
            }
            this.InvokeAsync("GetServerTime", new object[0], this.GetServerTimeOperationCompleted, userState);
        }
        
        private void OnGetServerTimeOperationCompleted(object arg) {
            if ((this.GetServerTimeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetServerTimeCompleted(this, new GetServerTimeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("CredentialSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpLoadData", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpLoadData([System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] arrData, int workstationid, string hardwareinfo) {
            this.Invoke("UpLoadData", new object[] {
                        arrData,
                        workstationid,
                        hardwareinfo});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginUpLoadData(byte[] arrData, int workstationid, string hardwareinfo, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("UpLoadData", new object[] {
                        arrData,
                        workstationid,
                        hardwareinfo}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndUpLoadData(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void UpLoadDataAsync(byte[] arrData, int workstationid, string hardwareinfo) {
            this.UpLoadDataAsync(arrData, workstationid, hardwareinfo, null);
        }
        
        /// <remarks/>
        public void UpLoadDataAsync(byte[] arrData, int workstationid, string hardwareinfo, object userState) {
            if ((this.UpLoadDataOperationCompleted == null)) {
                this.UpLoadDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpLoadDataOperationCompleted);
            }
            this.InvokeAsync("UpLoadData", new object[] {
                        arrData,
                        workstationid,
                        hardwareinfo}, this.UpLoadDataOperationCompleted, userState);
        }
        
        private void OnUpLoadDataOperationCompleted(object arg) {
            if ((this.UpLoadDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpLoadDataCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("CredentialSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Commit", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void Commit(string sql, int workstationid, string hardwareinfo) {
            this.Invoke("Commit", new object[] {
                        sql,
                        workstationid,
                        hardwareinfo});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCommit(string sql, int workstationid, string hardwareinfo, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Commit", new object[] {
                        sql,
                        workstationid,
                        hardwareinfo}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndCommit(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void CommitAsync(string sql, int workstationid, string hardwareinfo) {
            this.CommitAsync(sql, workstationid, hardwareinfo, null);
        }
        
        /// <remarks/>
        public void CommitAsync(string sql, int workstationid, string hardwareinfo, object userState) {
            if ((this.CommitOperationCompleted == null)) {
                this.CommitOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCommitOperationCompleted);
            }
            this.InvokeAsync("Commit", new object[] {
                        sql,
                        workstationid,
                        hardwareinfo}, this.CommitOperationCompleted, userState);
        }
        
        private void OnCommitOperationCompleted(object arg) {
            if ((this.CommitCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CommitCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("CredentialSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DownLoadData", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] DownLoadData(int workstationid, int numberrecordtransport, string hardwareinfo) {
            object[] results = this.Invoke("DownLoadData", new object[] {
                        workstationid,
                        numberrecordtransport,
                        hardwareinfo});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDownLoadData(int workstationid, int numberrecordtransport, string hardwareinfo, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DownLoadData", new object[] {
                        workstationid,
                        numberrecordtransport,
                        hardwareinfo}, callback, asyncState);
        }
        
        /// <remarks/>
        public byte[] EndDownLoadData(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void DownLoadDataAsync(int workstationid, int numberrecordtransport, string hardwareinfo) {
            this.DownLoadDataAsync(workstationid, numberrecordtransport, hardwareinfo, null);
        }
        
        /// <remarks/>
        public void DownLoadDataAsync(int workstationid, int numberrecordtransport, string hardwareinfo, object userState) {
            if ((this.DownLoadDataOperationCompleted == null)) {
                this.DownLoadDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDownLoadDataOperationCompleted);
            }
            this.InvokeAsync("DownLoadData", new object[] {
                        workstationid,
                        numberrecordtransport,
                        hardwareinfo}, this.DownLoadDataOperationCompleted, userState);
        }
        
        private void OnDownLoadDataOperationCompleted(object arg) {
            if ((this.DownLoadDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DownLoadDataCompleted(this, new DownLoadDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("CredentialSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/LogExceptions", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void LogExceptions(string message) {
            this.Invoke("LogExceptions", new object[] {
                        message});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginLogExceptions(string message, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("LogExceptions", new object[] {
                        message}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndLogExceptions(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void LogExceptionsAsync(string message) {
            this.LogExceptionsAsync(message, null);
        }
        
        /// <remarks/>
        public void LogExceptionsAsync(string message, object userState) {
            if ((this.LogExceptionsOperationCompleted == null)) {
                this.LogExceptionsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLogExceptionsOperationCompleted);
            }
            this.InvokeAsync("LogExceptions", new object[] {
                        message}, this.LogExceptionsOperationCompleted, userState);
        }
        
        private void OnLogExceptionsOperationCompleted(object arg) {
            if ((this.LogExceptionsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LogExceptionsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("CredentialSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DoLoadDataTable", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] DoLoadDataTable(string sql, string tablename) {
            object[] results = this.Invoke("DoLoadDataTable", new object[] {
                        sql,
                        tablename});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDoLoadDataTable(string sql, string tablename, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DoLoadDataTable", new object[] {
                        sql,
                        tablename}, callback, asyncState);
        }
        
        /// <remarks/>
        public byte[] EndDoLoadDataTable(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void DoLoadDataTableAsync(string sql, string tablename) {
            this.DoLoadDataTableAsync(sql, tablename, null);
        }
        
        /// <remarks/>
        public void DoLoadDataTableAsync(string sql, string tablename, object userState) {
            if ((this.DoLoadDataTableOperationCompleted == null)) {
                this.DoLoadDataTableOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDoLoadDataTableOperationCompleted);
            }
            this.InvokeAsync("DoLoadDataTable", new object[] {
                        sql,
                        tablename}, this.DoLoadDataTableOperationCompleted, userState);
        }
        
        private void OnDoLoadDataTableOperationCompleted(object arg) {
            if ((this.DoLoadDataTableCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DoLoadDataTableCompleted(this, new DoLoadDataTableCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("CredentialSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetCacheVersion", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetCacheVersion() {
            object[] results = this.Invoke("GetCacheVersion", new object[0]);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetCacheVersion(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetCacheVersion", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public int EndGetCacheVersion(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetCacheVersionAsync() {
            this.GetCacheVersionAsync(null);
        }
        
        /// <remarks/>
        public void GetCacheVersionAsync(object userState) {
            if ((this.GetCacheVersionOperationCompleted == null)) {
                this.GetCacheVersionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCacheVersionOperationCompleted);
            }
            this.InvokeAsync("GetCacheVersion", new object[0], this.GetCacheVersionOperationCompleted, userState);
        }
        
        private void OnGetCacheVersionOperationCompleted(object arg) {
            if ((this.GetCacheVersionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCacheVersionCompleted(this, new GetCacheVersionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("CredentialSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetNameCacheVersion", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetNameCacheVersion(string cachename) {
            object[] results = this.Invoke("GetNameCacheVersion", new object[] {
                        cachename});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetNameCacheVersion(string cachename, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetNameCacheVersion", new object[] {
                        cachename}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndGetNameCacheVersion(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetNameCacheVersionAsync(string cachename) {
            this.GetNameCacheVersionAsync(cachename, null);
        }
        
        /// <remarks/>
        public void GetNameCacheVersionAsync(string cachename, object userState) {
            if ((this.GetNameCacheVersionOperationCompleted == null)) {
                this.GetNameCacheVersionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetNameCacheVersionOperationCompleted);
            }
            this.InvokeAsync("GetNameCacheVersion", new object[] {
                        cachename}, this.GetNameCacheVersionOperationCompleted, userState);
        }
        
        private void OnGetNameCacheVersionOperationCompleted(object arg) {
            if ((this.GetNameCacheVersionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetNameCacheVersionCompleted(this, new GetNameCacheVersionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("CredentialSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ExecuteNonQuery", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int ExecuteNonQuery(string sql) {
            object[] results = this.Invoke("ExecuteNonQuery", new object[] {
                        sql});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginExecuteNonQuery(string sql, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ExecuteNonQuery", new object[] {
                        sql}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndExecuteNonQuery(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void ExecuteNonQueryAsync(string sql) {
            this.ExecuteNonQueryAsync(sql, null);
        }
        
        /// <remarks/>
        public void ExecuteNonQueryAsync(string sql, object userState) {
            if ((this.ExecuteNonQueryOperationCompleted == null)) {
                this.ExecuteNonQueryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExecuteNonQueryOperationCompleted);
            }
            this.InvokeAsync("ExecuteNonQuery", new object[] {
                        sql}, this.ExecuteNonQueryOperationCompleted, userState);
        }
        
        private void OnExecuteNonQueryOperationCompleted(object arg) {
            if ((this.ExecuteNonQueryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ExecuteNonQueryCompleted(this, new ExecuteNonQueryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ReRegister", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ReRegister(int workstationid, string workstationname, string oldhardwareinfo, string newhardwareinfo) {
            this.Invoke("ReRegister", new object[] {
                        workstationid,
                        workstationname,
                        oldhardwareinfo,
                        newhardwareinfo});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginReRegister(int workstationid, string workstationname, string oldhardwareinfo, string newhardwareinfo, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ReRegister", new object[] {
                        workstationid,
                        workstationname,
                        oldhardwareinfo,
                        newhardwareinfo}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndReRegister(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void ReRegisterAsync(int workstationid, string workstationname, string oldhardwareinfo, string newhardwareinfo) {
            this.ReRegisterAsync(workstationid, workstationname, oldhardwareinfo, newhardwareinfo, null);
        }
        
        /// <remarks/>
        public void ReRegisterAsync(int workstationid, string workstationname, string oldhardwareinfo, string newhardwareinfo, object userState) {
            if ((this.ReRegisterOperationCompleted == null)) {
                this.ReRegisterOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReRegisterOperationCompleted);
            }
            this.InvokeAsync("ReRegister", new object[] {
                        workstationid,
                        workstationname,
                        oldhardwareinfo,
                        newhardwareinfo}, this.ReRegisterOperationCompleted, userState);
        }
        
        private void OnReRegisterOperationCompleted(object arg) {
            if ((this.ReRegisterCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ReRegisterCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Register", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void Register(int workstationid, string workstationname, string hardwareinfo) {
            this.Invoke("Register", new object[] {
                        workstationid,
                        workstationname,
                        hardwareinfo});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginRegister(int workstationid, string workstationname, string hardwareinfo, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Register", new object[] {
                        workstationid,
                        workstationname,
                        hardwareinfo}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndRegister(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void RegisterAsync(int workstationid, string workstationname, string hardwareinfo) {
            this.RegisterAsync(workstationid, workstationname, hardwareinfo, null);
        }
        
        /// <remarks/>
        public void RegisterAsync(int workstationid, string workstationname, string hardwareinfo, object userState) {
            if ((this.RegisterOperationCompleted == null)) {
                this.RegisterOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRegisterOperationCompleted);
            }
            this.InvokeAsync("Register", new object[] {
                        workstationid,
                        workstationname,
                        hardwareinfo}, this.RegisterOperationCompleted, userState);
        }
        
        private void OnRegisterOperationCompleted(object arg) {
            if ((this.RegisterCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RegisterCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://tempuri.org/", IsNullable=false)]
    public partial class CredentialSoapHeader : System.Web.Services.Protocols.SoapHeader {
        
        private string userNameField;
        
        private string passWordField;
        
        private decimal idField;
        
        private System.Xml.XmlAttribute[] anyAttrField;
        
        /// <remarks/>
        public string UserName {
            get {
                return this.userNameField;
            }
            set {
                this.userNameField = value;
            }
        }
        
        /// <remarks/>
        public string PassWord {
            get {
                return this.passWordField;
            }
            set {
                this.passWordField = value;
            }
        }
        
        /// <remarks/>
        public decimal Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAnyAttributeAttribute()]
        public System.Xml.XmlAttribute[] AnyAttr {
            get {
                return this.anyAttrField;
            }
            set {
                this.anyAttrField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void PingCompletedEventHandler(object sender, PingCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void IsExistsCompletedEventHandler(object sender, IsExistsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsExistsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsExistsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetServerTimeCompletedEventHandler(object sender, GetServerTimeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetServerTimeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetServerTimeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.DateTime Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.DateTime)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void UpLoadDataCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void CommitCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void DownLoadDataCompletedEventHandler(object sender, DownLoadDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DownLoadDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DownLoadDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void LogExceptionsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void DoLoadDataTableCompletedEventHandler(object sender, DoLoadDataTableCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DoLoadDataTableCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DoLoadDataTableCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetCacheVersionCompletedEventHandler(object sender, GetCacheVersionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCacheVersionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCacheVersionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetNameCacheVersionCompletedEventHandler(object sender, GetNameCacheVersionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetNameCacheVersionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetNameCacheVersionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void ExecuteNonQueryCompletedEventHandler(object sender, ExecuteNonQueryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ExecuteNonQueryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ExecuteNonQueryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void ReRegisterCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void RegisterCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
}

#pragma warning restore 1591