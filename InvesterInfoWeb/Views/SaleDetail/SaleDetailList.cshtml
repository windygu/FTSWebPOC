@model System.Data.DataTable
@{
    ViewBag.Title = "Quản Lý Chứng Từ ";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<script>
 //Creates a gloabl object called templateLoader with a single method "loadExtTemplate"
    var templateLoader = (function($,host){
        //Loads external templates from path and injects in to page DOM
        return{
            //Method: loadExtTemplate
            //Params: (string) path: the relative path to a file that contains template definition(s)
            loadExtTemplate: function(path){
                //Use jQuery Ajax to fetch the template file
                var tmplLoader = $.get(path)
                    .success(function(result) {
                        //On success, Add templates to DOM (assumes file only has template definitions)
                        $("body").append(result);
                    })
                    .error(function(result) {
                        alert("Error Loading Templates -- TODO: Better Error Handling");
                    });

                tmplLoader.complete(function(){
                    //Publish an event that indicates when a template is done loading
                    $(host).trigger("TEMPLATE_LOADED", [path]);
                });
            }
        };
    })(jQuery, document);
    
</script>
<h2>Quản Lý Chứng Từ</h2>
<br />
<div id="serverValidationMessageContainer">
    <div id="serverValidationMessage">
    </div>

</div>
<div id="progressBar"></div>
<br />
<script type="text/kendo-template" id="validation_template">       
        <div id="#=field#_validationMessage" class="k-widget k-tooltip k-tooltip-validation k-invalid-msg field-validation-error" style="margin: 0.5em; display: block;" data-for="#=field#" data-valmsg-for="#=field#" role="alert"><span class="k-icon k-warning"></span>Có lỗi ở #=field# : #=message#<div class="k-callout k-callout-n"></div></div>
</script>

<script type="text/x-kendo-template" id="grid_toolbar">
        <button class="k-button" id="grid_toolbar_addButton">Thêm Mới</button>
</script>

<script type="text/kendo-template" id="application_layout_template">       
        <div >
            <section id="mainView"> </section>    
        </div>
        <div>
            <section id="dialogViews"> </section>
        </div>
</script>

<script>
    //layouting the form 
    var layoutView = new kendo.Layout("application_layout_template");

    //layout
    var invoiceRouter = new kendo.Router({
        init: function () {
            layoutView.render("#application");
        }
    });
    
  
    
    $(document).bind("TEMPLATE_LOADED", function (e, path) {
      
        if (path.contains("invoiceListView")) {
            //invoice list view
            var invoiceListView = new kendo.View("invoiceListView_Template", { model: invoiceListModel });

            invoiceRouter.route("/SaleDetail/SaleDetailList", function () {
                layoutView.showIn("#mainView", invoiceListView);
                var win = $("#dialogViews").data("kendoWindow");
                if (win) {
                    win.close();
                }

                $(".myAdd").off("click").on("click", function () {
                    invoiceRouter.navigate("/SaleDetail/SaleDetailList/edit");
                    viewModel.createNew();
                });
            });


            ////start routing to invoice list screen
            invoiceRouter.start();
            invoiceRouter.navigate("/SaleDetail/SaleDetailList");

            $("a[href='#']").attr("href", "#a");//prevent scrolling to top by empty href
        }
      
        if (path.contains("invoiceDetailView")) {
            //invoice detal view 
            var invoiceDetailView = new kendo.View("invoiceDetailView_Template", { model: viewModel });

            invoiceRouter.route("/SaleDetail/SaleDetailList/edit", function () {

                var win = $("#dialogViews").data("kendoWindow");

                if (!win) {
                    //initialize invoice search windows
                    win = $("#dialogViews").kendoWindow({

                        title: "Chứng từ #",
                        visible: false,
                        modal: true,
                        height: "500px",
                        width: "900px",
                        minHeight: 500,
                        minWidth: 600,
                        resizable: true,

                    }).data("kendoWindow");
                }

                win.center();
                win.open();

                invoiceDetailView.render($("#dialogViews"));
               
                win.center();
                
                $("a[href='#']").attr("href", "#a");//prevent scrolling to top by empty href

            });
            $("a[href='#']").attr("href", "#a");//prevent scrolling to top by empty href
        }
    });
    
  
</script>


<div id="application"></div>


<script>
    var validationMessageTmpl = kendo.template($("#validation_template").html());

    function hideErrors() {
        var message = $("#SERVER_validationMessage");
        if (message) {
            message.replaceWith('<div id="serverValidationMessage"><div>');
        }

    }

    function handleError(args) {
        if (args.errors) {
            var keys = Object.keys(args.errors);
            var fieldName = keys[0];//select only first error field. 
            showMessage($("#serverValidationMessageContainer"), fieldName, args.errors[fieldName].errors[0]);//show only first error. 
        }
    }

    function showMessage(container, fieldName, error) {
        //add the validation message to the form
        container.find("#serverValidationMessage")
            .replaceWith(validationMessageTmpl({ field: fieldName, message: error }));
    }

    var invoiceSource = new kendo.data.DataSource({
        transport: {
            read: {
                url: "/SaleDetail/Read",
                dataType: "jsonp"
            },
            update: {
                url: "/SaleDetail/Update",
                dataType: "jsonp"
            },
            destroy: {
                url: "/SaleDetail/Destroy",
                dataType: "jsonp"
            },
            create: {
                url: "/SaleDetail/Create",
                dataType: "jsonp"
            },
            parameterMap: function (options, operation) {
                if (operation !== "read" && options.models) {
                    return { models: kendo.stringify(options.models) };
                }
            }
        },
        batch: true,
        schema: {
            errors: "Errors",
            model: {
                id: "PR_KEY",
                fields: {
                    FR_KEY: { editable: true, nullable: true },
                    LIST_ORDER: { editable: true, nullable: true },
                    ITEM_ID: { editable: true, nullable: false, validation: { required: true } },
                    ITEM_NAME: { editable: true, nullable: false, validation: { required: true } },
                    QUANTITY: { editable: true, nullable: false, validation: { required: true } },
                    UNIT_PRICE: { editable: true, nullable: false, validation: { required: true } },
                    AMOUNT: { editable: true, nullable: false, validation: { required: true } },
                    VAT_TAX_RATE: { editable: true, nullable: true },
                    VAT_TAX_AMOUNT: { editable: true, nullable: true },
                    TOTAL_AMOUNT: { editable: true, nullable: false, validation: { required: true } }
                }
            }
        },
        error: handleError,

    });

    var saleSource = new kendo.data.DataSource({
        transport: {
            read: {
                url: "/Sale/Read",
                dataType: "jsonp"
            },
            update: {
                url: "/Sale/Update",
                dataType: "jsonp"
            },
            destroy: {
                url: "/Sale/Destroy",
                dataType: "jsonp"
            },
            create: {
                url: "/Sale/Create",
                dataType: "jsonp"
            },
            parameterMap: function (options, operation) {
                if (operation !== "read" && options.models) {
                    return { models: kendo.stringify(options.models) };
                }
            }
        },
        batch: true,
        schema: {
            errors: "Errors",
            model: {
                id: "PR_KEY",
                fields: {
                    PR_KEY: { editable: false, nullable: true, type: "string" },
                    ORGANIZATION_ID: { editable: true, nullable: true, type: "string" },
                    TRAN_ID: { editable: true, nullable: true, type: "string" },
                    TRAN_DATE: { editable: true, nullable: true, type: "date" },
                    TRAN_NO: { editable: true, nullable: false, validation: { required: true }, type: "string" },
                    PR_DETAIL_ID: { editable: true, nullable: false, validation: { required: true }, type: "string" },
                    ADDRESS: { editable: true, nullable: false, validation: { required: true }, type: "string" },
                    TAX_FILE_NUMBER: { editable: true, nullable: false, validation: { required: true }, type: "string" },
                    COMMENTS: { editable: true, nullable: true, type: "string" },
                    STATUS: { editable: true, nullable: true, type: "boolean" },
                }
            }
        },
        error: handleError,

    });
</script>


<script src="@Url.Content("~/Scripts/datasource/customerSource.js")"></script>
<script src="@Url.Content("~/Scripts/datasource/invoiceSearchSource.js")"></script>
<script src="@Url.Content("~/Scripts/datasource/productSource.js")"></script>
<script src="@Url.Content("~/Scripts/datasource/salePriceSource.js")"></script>
<script src="@Url.Content("~/Scripts/widget/ftsTemplatedWidget.js")"></script>
<script src="@Url.Content("~/Scripts/datasource/clone.js")"></script>
<script src="@Url.Content("~/Scripts/datasource/progressbar.js")"></script>
<script>

    function editSaleDetail(e) {
        if (e.values.QUANTITY) {
            e.model.QUANTITY = e.values.QUANTITY;
            populateSaleDetail(e.model, e.model);
        }
    }

    function deleteSaleDetail(e) {
        e.preventDefault();
        var dataItem = this.dataItem($(e.target).closest("tr"));
        if (confirm("Bạn muốn xóa bản ghi này?")) {
            var dataSource = $("#saleDetailGrid").data("kendoGrid").dataSource;
            invoiceSource.remove(dataItem);
            bindSaleDetailGrid();
            viewModel.set("hasChanges", true);
        }
    }



    //initilize view model
    var viewModel = kendo.observable({
        //customer data source
        thisCustomerSource: customerSource,//just use temporally for filtering
        //sale detail/invoice datasource
        thisSaleDetailSource: invoiceSource,
        selectedSaleDetails: null,//use for operation on sale detail grid, will need to merge to saleDetailSource before save
        //sale data source
        thisSaleSource: saleSource,
        selectedSale: null,
        selectedCustomer: null,
        hasChanges: false,
        isAddingNew: false,


        cancelChange: function () {
            hideErrors();
            this.thisSaleSource.cancelChanges();
            this.thisSaleDetailSource.cancelChanges();
            var tranNo = $("#TRAN_NO").val();
            if (tranNo) {
                var sales = saleSource.data();
                for (var j = 0; j < sales.length; j++) {
                    if (sales[j].TRAN_NO === tranNo) {
                        bindSale(sales[j].PR_KEY);

                        this.set("hasChanges", false);
                        break;
                    }
                }

            }

            invoiceRouter.navigate("/SaleDetail/SaleDetailList");
        },

        createNew: function () {
            var newSale = {
                PR_KEY: null,
                ORGANIZATION_ID: "0000",
                TRAN_ID: "TRAN_ID", //todo
                TRAN_DATE: new Date(),
                TRAN_NO: "TRAN_NO", //todo
                PR_DETAIL_ID: "PR_DETAIL_ID",
                ADDRESS: "ADDRESS",
                TAX_FILE_NUMBER: "TAX_FILE_NUMBER",
                COMMENTS: "COMMENTS",
                STATUS: "POSTED",
            };
            this.thisSaleSource.insert(0, newSale);
            this.set("selectedSale", newSale);
            this.set("selectedCustomer", null);
            bindSaleDetailGrid();
            var newSaleDetail = {
                PR_KEY: null,
                FR_KEY: null,

                LIST_ORDER: null,
                ITEM_ID: 0,
                ITEM_NAME: "",
                QUANTITY: 0,
                UNIT_PRICE: 0,
                AMOUNT: 0,
                VAT_TAX_RATE: 0,
                VAT_TAX_AMOUNT: 0,
                TOTAL_AMOUNT: 0
            };
            this.selectedSaleDetails.insert(0, newSaleDetail);

            $("#TRAN_NO").val("").focus();
            $("#PR_DETAIL_ID").val("");

            this.set("hasChanges", false);
            this.set("isAddingNew", true);

        },

        save: function () {
            hideErrors();
            //merge sale details to datasource
            this.thisSaleDetailSource.data(this.get("selectedSaleDetails").data());
            //merge sale to data sources
            var sales = viewModel.thisSaleSource.data();
            var selectedSale = this.get("selectedSale");
            if (selectedSale) {
                for (var i = 0; i < sales.length; i++) {
                    if (sales[i].PR_KEY === selectedSale.PR_KEY) {
                        sales[i].set("ADDRESS", selectedSale.ADDRESS);
                        sales[i].set("PR_DETAIL_ID", selectedSale.PR_DETAIL_ID);
                        sales[i].set("TAX_FILE_NUMBER", selectedSale.TAX_FILE_NUMBER);
                        sales[i].set("TRAN_NO", selectedSale.TRAN_NO);
                        sales[i].set("TRAN_ID", selectedSale.TRAN_ID);
                        break;
                    }
                }
            }


            if (this.get("isAddingNew")) { //adding new

                this.thisSaleSource.sync();




            } else {//updating

                if (this.thisSaleSource.hasChanges()) {//normally, if there is no change in SaleSource, SaleSource will not be post back to server

                    this.thisSaleSource.sync();

                } else {

                    this.thisSaleDetailSource.sync();//if there is no change to sale Source, so sync only the Sale Details

                }
            }

            this.set("hasChanges", false);
            this.set("isAddingNew", false);

            invoiceRouter.navigate("/SaleDetail/SaleDetailList");
        },

        remove: function () {
            if (confirm("Xóa đơn hàng và chứng từ này?")) {
                hideErrors();
                //search for deleting sale in sale source
                var sales = this.thisSaleSource.data();
                var selectedSale = this.get("selectedSale");
                for (var i = 0; i < sales.length ; i++) {
                    if (sales[i].PR_KEY === selectedSale.PR_KEY) {
                        this.thisSaleSource.remove(sales[i]);
                        break;
                    }
                }

                this.thisSaleSource.sync();

                ///reset form's state
                this.set("selectedSale", null);
                this.set("selectedSaleDetails", null);
                this.set("selectedCustomer", null);
                this.set("hasChanges", false);
                this.set("isAddingNew", false);

                ///reset non-binded fields
                $("#TRAN_NO").val("");
                $("#PR_DETAIL_ID").val("");


            }
        },

        saleBinded: function () {
            if (this.get("selectedSale")) {
                return true;
            }
            return false;
        },

        change: function (e) {
            if (e.target) {
                if (e.target.id === "PR_DETAIL_ID") {
                    var customers = customerSource.data();
                    var foundCustomer = false;
                    for (var i = 0; i < customers.length; i++) {
                        if (customers[i].PR_DETAIL_ID === e.target.value) {
                            bindForm(customers[i], true);
                            foundCustomer = true;
                            this.set("hasChanges", true);
                            break;
                        }
                    }
                    if (!foundCustomer) {
                        this.showCustomerSelector();
                    }
                } else if (e.target.id === "TRAN_NO") {


                    var sales = saleSource.data();
                    var foundSale = false;
                    for (var j = 0; j < sales.length; j++) {
                        if (sales[j].TRAN_NO === e.target.value) {
                            bindSale(sales[j].PR_KEY);
                            this.set("isAddingNew", false);
                            foundSale = true;
                            break;
                        }
                    }

                    if (!foundSale) {
                        if (!this.get("isAddingNew")) {
                            this.showInvoiceSelector();
                        } else { //creating new 
                            var selectedSale = this.get("selectedSale");
                            selectedSale.set("TRAN_NO", e.target.value);
                            selectedSale.set("TRAN_ID", e.target.value);
                        }
                    }
                } else {
                    this.set("hasChanges", true);
                }
            } else {
                this.set("hasChanges", true);
            }
        },

        showInvoiceSelector: function () {
            var win = $("#invoiceWindow").data("kendoWindow");

            if (!win) {
                //initialize invoice search windows
                win = $("#invoiceWindow").kendoWindow({
                    title: "Tìm Kiếm Mã Chứng Từ",
                    visible: false
                }).data("kendoWindow");


                $("#invoiceSelectGrid").kendoGrid({
                    dataSource: invoiceSearchSource,
                    pageable: true,
                    height: 450,
                    columns: [
                        { field: "TRAN_NO", title: "Số" },
                        { field: "TRAN_DATE", title: "Ngày" },
                        { field: "PR_DETAIL_ID", title: "Khách Hàng" },
                        { field: "PR_DETAIL_NAME", title: "Tên Khách Hàng" },
                        { field: "ITEM_ID", title: "Mã Sản Phẩm" },
                        { field: "QUANTITY", title: "Số Lượng" },
                        { field: "UNIT_PRICE", title: "Đơn Giá" },
                        { field: "TOTAL_AMOUNT", title: "Tổng Tiền" },
                        { command: [{ name: "select", text: "Chọn", click: selectInvoice }], title: "&nbsp;", width: "100px" }],
                    editable: false,
                    filterable: true,
                    sortable: true
                });
            }
            win.center();
            win.open();
        },

        showCustomerSelector: function () {
            var win = $("#customerWindow").data("kendoWindow");
            if (!win) {
                win = $("#customerWindow").kendoWindow({
                    title: "Tìm Kiếm Khách Hàng",
                    visible: false
                }).data("kendoWindow");

                $("#customerSelectGrid").kendoGrid({
                    dataSource: customerSource,
                    pageable: true,
                    height: 450,
                    columns: [
                        { field: "PR_DETAIL_ID", title: "Khách Hàng" },
                        { field: "PR_DETAIL_NAME", title: "Tên Khách Hàng" },
                        { command: [{ name: "select", text: "Chọn", click: selectCustomer }], title: "&nbsp;", width: "100px" }],
                    editable: false,
                });
            }

            win.center();
            win.open();
        }
    });


    viewModel.thisSaleSource.bind("requestEnd", function (e) {
        if (e.type === "create" || e.type === "update") {
            viewModel.thisSaleDetailSource.sync(); //sync changed data
        }

        if (e.type === "create") { //created, re-read to sync changes
            viewModel.thisSaleSource.read();
        }


        if (e.type === "destroy") {
            viewModel.thisSaleDetailSource.read(); //sync deleted data by server. 
            invoiceSearchSource.read(); //when deleting a sale, invoice search results should be updated accrodingly
            clearForm();
        }

        if (e.type === "read") { //freshing the list so clear the screen. 
            clearForm();
        }

    });

    viewModel.thisSaleDetailSource.bind("requestEnd", function (e) {
        if (e.type === "create" || e.type === "update" || e.type === "destroy") {
            invoiceSearchSource.read();
            viewModel.thisSaleDetailSource.read();

        }
        if (e.type === "update" || e.type === "destroy") {
            bindSaleDetailGrid();
        }

    });

    function clearForm() {
        var grid = $('#saleDetailGrid').data('kendoGrid');
        if (grid) {
            viewModel.set("selectedSale", null);
            grid.dataSource.data([]);
            grid.refresh();
            $("#TRAN_NO").val("");
        }
    }

    function bindSaleDetailGrid() {
        var grid = $('#saleDetailGrid').data('kendoGrid');

        var selectedSale = viewModel.get("selectedSale");

        if (selectedSale) {
            var saleDetails = viewModel.thisSaleDetailSource.data();
            var currentSaleDetails = [];
            for (var i = 0; i < saleDetails.length; i++) {
                var saleDetail = saleDetails[i];
                if (saleDetail.FR_KEY === selectedSale.PR_KEY) {
                    currentSaleDetails.push(saleDetail);
                }
            }

            var saleDetailSource = new kendo.data.DataSource();
            saleDetailSource.data(currentSaleDetails);

            viewModel.set("selectedSaleDetails", saleDetailSource);
            //bind selected sale details to grid
            grid.setDataSource(viewModel.get("selectedSaleDetails"));

            saleDetailSource.bind("change", function (e) {
                viewModel.set("hasChanges", true);
            });
        } else {
            //there is no selected sale, this grid should be empty
            grid.dataSource.data([]);
        }
        grid.refresh();
    }

    function selectInvoice(e) {
        var saleSearchRecord = this.dataItem($(e.currentTarget).closest("tr"));

        invoiceRouter.navigate("/SaleDetail/SaleDetailList/edit");

        bindSale(saleSearchRecord.PR_KEY);


        //close the windows if there is one
        if ($('#invoiceWindow').data().kendoWindow)
            $('#invoiceWindow').data().kendoWindow.close();
        
      
        //e.preventDefault();

    }

    function removeInvoice(e) {
        var saleSearchRecord = this.dataItem($(e.currentTarget).closest("tr"));

        if (confirm("Chú ý, đơn hàng chứa bản ghi này sẽ bị xóa")) {

            var sales = viewModel.thisSaleSource.data();

            for (var i = 0; i < sales.length ; i++) {
                if (sales[i].PR_KEY === saleSearchRecord.PR_KEY) {
                    viewModel.thisSaleSource.remove(sales[i]);
                    break;
                }
            }

            viewModel.thisSaleSource.sync();
        }
       
       // e.preventDefault();

    }



    function bindSale(saleKey) {
        //set selected sale
        var sales = viewModel.thisSaleSource.data();
        for (var i = 0; i < sales.length; i++) {
            if (sales[i].PR_KEY === saleKey) {
                viewModel.set("selectedSale", sales[i]);
                break;
            }
        }

        //set selected customer
        var customers = viewModel.thisCustomerSource.data();
        var customerId = viewModel.get("selectedSale").PR_DETAIL_ID;
        for (var j = 0; j < customers.length; j++) {
            if (customerId === customers[j].PR_DETAIL_ID) {
                bindForm(customers[j], false);
                break;
            }
        }

        //reset input box--> just in case user select by browsing. 
        $("#TRAN_NO").val(viewModel.selectedSale.TRAN_NO);

        //bind sale detail grid
        bindSaleDetailGrid();
    }

    function bindForm(customer, updateCustomerInfo) {
        viewModel.set("selectedCustomer", customer);
        var selectedSale = viewModel.get("selectedSale");

        if (selectedSale && updateCustomerInfo) {
            //copy customer info to sale record
            selectedSale.set("ADDRESS", customer.ADDRESS);
            selectedSale.set("PR_DETAIL_ID", customer.PR_DETAIL_ID);
            selectedSale.set("TAX_FILE_NUMBER", customer.TAX_FILE_NUMBER);
        }

        //rebind the panel to the view model
        //kendo.bind($("#form-container"), viewModel);
        $('#PR_DETAIL_ID').val(viewModel.selectedCustomer.PR_DETAIL_ID);

    }

    function selectCustomer(e) {
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));

        bindForm(dataItem, true);

        viewModel.set("hasChanges", true);

        //close the customer windows
        $('#customerWindow').data().kendoWindow.close();
    }

    function getUnit(itemId) {
        if (itemId) {
            var products = productSource.data();
            for (var j = 0; j < products.length; j++) {
                if (products[j].ITEM_ID === itemId) {
                    return products[j].UNIT_ID;
                }
            }
            return itemId;
        }
        return "";
    }

    function selectProduct(e) {
        var selectedProduct = this.dataItem($(e.currentTarget).closest("tr"));

        var saleDetailGrid = $('#saleDetailGrid').data("kendoGrid");
        // Get selected cell
        var selectSaleDetailCell = saleDetailGrid.select();

        // Get the row that the cell belongs to.
        var selectedSaleDetailRow = selectSaleDetailCell.closest("tr");
        // Get the data item corresponding to this cell
        var selectedSaleDetail = saleDetailGrid.dataItem(selectedSaleDetailRow) || lastEditedSaleItem;

        selectedSaleDetail.set("ITEM_ID", selectedProduct.ITEM_ID);
        selectedSaleDetail.set("ITEM_NAME", selectedProduct.ITEM_NAME);

        //get Unit Price
        var salePrices = salePriceSource.data();
        for (var j = 0; j < salePrices.length; j++) {
            if (salePrices[j].ITEM_ID === selectedProduct.ITEM_ID) {
                selectedSaleDetail.set("UNIT_PRICE", salePrices[j].UNIT_PRICE);
                break;
            }
        }

        populateSaleDetail(selectedSaleDetail, selectedSaleDetail);

        $('#productWindow').data().kendoWindow.close();

        viewModel.set("hasChanges", true);
    }

    var lastEditedSaleItem;

    function showProductSelector(e) {
        var win = $("#productWindow").data("kendoWindow");
        if (!win) {
            win = $("#productWindow").kendoWindow({

                title: "Tìm Kiếm Sản Phẩm",
                visible: false

            }).data("kendoWindow");

            $("#productSelectGrid").kendoGrid({
                dataSource: productSource,
                pageable: true,
                height: 450,
                columns: [
                    { field: "ITEM_ID", title: "Mã Sản Phẩm" },
                    { field: "ITEM_NAME", title: "Tên Sản Phẩm" },
                    { command: [{ name: "select", text: "Chọn", click: selectProduct }], title: "&nbsp;", width: "100px" }],
                editable: false,
            });
        }

        lastEditedSaleItem = $("#saleDetailGrid").data("kendoGrid").dataItem($(e.currentTarget).closest("tr"));

        win.center();
        win.open();
    };

    function productEditor(container, options) {
        var arr = [];

        if (!options.model.ITEM_ID) {
            options.model.PR_KEY = "";
            options.model.FR_KEY = viewModel.selectedSale.PR_KEY;
            options.model.LIST_ORDER = 0;
            options.model.ITEM_ID = "0";
            options.model.ITEM_NAME = "";
            options.model.QUANTITY = 0;
            options.model.UNIT_PRICE = 0;
            options.model.AMOUNT = 0;
            options.model.VAT_TAX_RATE = 0;
            options.model.VAT_TAX_AMOUNT = 0;
            options.model.TOTAL_AMOUNT = 0;
        }

        arr.push(options.model);

        $('<div/>').appendTo(container)
            .kendoftsTemplatedWidget({
                autoBind: true,
                dataSource: arr,
                template: '<span class="k-textbox k-button k-space-right"><input type="text" class="k-textbox" id="item#=ITEM_ID#" /><a id="widgetSelector#=ITEM_ID#"class="k-icon k-insertFile"></a></span>'
            });

        var aquery = "#widgetSelector" + options.model.ITEM_ID;
        $(aquery).on("click", showProductSelector);

        var inputquery = "#item" + options.model.ITEM_ID;
        $(inputquery).val(options.model.ITEM_ID);

        $(inputquery).on("change", function (e) {
            var products = productSource.data();
            var foundProduct = false;
            for (var i = 0; i < products.length; i++) {
                if (products[i].ITEM_ID === e.target.value) {
                    foundProduct = true;
                    var grid = $("#saleDetailGrid").data("kendoGrid");
                    var currentEditingSaleDetail = grid.dataItem($(e.currentTarget).closest("tr"));
                    lastEditedSaleItem = currentEditingSaleDetail;
                    currentEditingSaleDetail.set("ITEM_ID", products[i].ITEM_ID);
                    currentEditingSaleDetail.set("ITEM_NAME", products[i].ITEM_NAME);

                    //get Unit Price (client calculation)
                    var salePrices = salePriceSource.data();
                    for (var j = 0; j < salePrices.length; j++) {
                        if (salePrices[j].ITEM_ID === products[i].ITEM_ID) {
                            currentEditingSaleDetail.set("UNIT_PRICE", salePrices[j].UNIT_PRICE);
                            break;
                        }
                    }

                    populateSaleDetail(currentEditingSaleDetail, lastEditedSaleItem);


                    grid.refresh();
                    viewModel.set("hasChanges", true);
                    break;
                }
            }
            if (!foundProduct) {
                showProductSelector(e);
            }
        });

    }

    //get amount & tax (server calculation)
    function populateSaleDetail(input, output) {
        $.ajax({
            dataType: "json",
            url: "/SaleDetail/Populate",
            data: kendo.stringify(input),
            success: function (result) {
                output.set("AMOUNT", result[0].AMOUNT);
                output.set("VAT_TAX_RATE", result[0].VAT_TAX_RATE);
                output.set("VAT_TAX_AMOUNT", result[0].VAT_TAX_AMOUNT);
                output.set("TOTAL_AMOUNT", result[0].TOTAL_AMOUNT);
            }
        });
    }

    var invoiceListModel = new kendo.observable({
        items: invoiceSearchSource,
        selectedQuarter: null,
        fromDate: null,
        thruDate: null,
        quarters: new kendo.data.DataSource({
            transport: {
                read: {
                    url: "/SaleDetail/GetQuarterList",
                    dataType: "jsonp"
                }
            }
        }),
        change: function (e) {
            var quarterData = this.get("quarters").data();
            for (var i = 0; i < quarterData.length; i++) {
                if (quarterData[i].QNAME === this.get("selectedQuarter")) {
                    this.set("fromDate", quarterData[i].FROM_DATE);
                    this.set("thruDate", quarterData[i].THRU_DATE);
                    break;
                }
            }
        },

        fillInvoice: function () {
            invoiceSearchSource.filter({
                "logic": "and",
                "filters": [
                    { field: "TRAN_DATE", operator: "lte", value: kendo.parseDate(this.get("thruDate")) },
                    { field: "TRAN_DATE", operator: "gte", value: kendo.parseDate(this.get("fromDate")) }
                ]
            });

        },

        addInvoice: function () {
            invoiceRouter.navigate("/SaleDetail/SaleDetailList/edit");
            viewModel.createNew();
        }


    });
    

    templateLoader.loadExtTemplate("/Scripts/template/invoiceListView.tmpl.htm");

    templateLoader.loadExtTemplate("/Scripts/template/invoiceDetailView.tmpl.htm");

    //clear sale selector
    $("#TRAN_NO").val("");

    //load data from server
    viewModel.thisSaleSource.read();
    customerSource.read();
    viewModel.thisSaleDetailSource.read();
    invoiceSearchSource.read();
    salePriceSource.read();
    
    $("a[href='#']").attr("href", "#a");//prevent scrolling to top by empty href
    

   
</script>
